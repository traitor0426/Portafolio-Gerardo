--PROCEDIMIENTO ALMACENADO PARA GENERAR LA CLAVE DE LOS EMPLEADOS 
DELIMITER %%
CREATE PROCEDURE generarCodigoEmpleado()
BEGIN 
    DECLARE contador INT;
		DECLARE noEmp varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM Empleados); 
        IF(contador<10)THEN
            SET noEmp= CONCAT('Em-00',contador);
            ELSE IF(contador<100) THEN
                SET noEmp= CONCAT('Em-0',contador);
                ELSE IF(contador<1000)THEN
                    SET noEmp= CONCAT('Em-',contador);
                END IF;
            END IF;
        END IF; 
	END;
	INSERT INTO empleados(NoEmpleado) VALUES (noEmp); 
	SELECT NoEmpleado FROM empleados WHERE NoEmpleado = noEmp; 	
END %%
DELIMITER ;


--PROCEDIMIENTO PARA AGREGAR EMPLEADO 
DELIMITER %%
CREATE PROCEDURE insertarDatosEmpleado2(IN noEmp varchar(10), IN nombremp varchar(20), 
IN apepat 
varchar(20), IN apemat varchar(20), IN calle varchar(20), IN noext varchar(20), 
IN col varchar(20), IN cp varchar(10), IN muni varchar(20), IN estado varchar(20), 
IN sueldo float, IN puest varchar(20), IN curp varchar(18), IN telefono varchar(13))
BEGIN 
UPDATE empleados SET Nombre = nombremp, ApellidoPat = apepat, ApellidoMat = apemat, 
Calle = calle, noExterior = noext, colonia = col, CP = cp, Municipio = muni, 
Estado = estado, Sueldo = sueldo, Puesto = puest
WHERE NoEmpleado = noEmp;  

INSERT INTO CURPEmpleados VALUES (noEmp, curp); 
INSERT INTO NoTelefonoEmpleados VALUES (noEmp, telefono); 
END %%
DELIMITER ; 

--PROCEDIMIENTO PARA ACTUALIZAR EMPLEADO 
DELIMITER %%
CREATE PROCEDURE actualizarEmpleado(IN noEmp varchar(10), IN nombremp varchar(20), 
IN apepat 
varchar(20), IN apemat varchar(20), IN calle varchar(20), IN noext varchar(20), 
IN col varchar(20), IN cp varchar(10), IN muni varchar(20), IN estado varchar(20), 
IN sueldo float, IN puesto varchar(20), IN curp varchar(18), IN telefono varchar(13))
BEGIN 
UPDATE empleados SET Nombre = nombremp, ApellidoPat = apepat, ApellidoMat = apemat, 
Calle = calle, noExterior = noext, colonia = col, CP = cp, Municipio = muni, 
Estado = estado, Sueldo = sueldo, Puesto = puesto 
WHERE NoEmpleado = noEmp;  

UPDATE CURPEmpleados SET CURP = curp WHERE NoEmpleado = noEmp; 
UPDATE NoTelefonoEmpleados SET NoTelefono = telefono WHERE NoEmpleado = noEmp;  

END %%
DELIMITER ; 

--VISTA CLIENTES 
CREATE VIEW vistaClientes AS 
SELECT Clientes.NoCliente, Nombre, ApellidoPat, ApellidoMat, Calle, noExterior, colonia, 
CP, Municipio, Estado, NoTelefono FROM Clientes, NoTelefonoClientes WHERE 
Clientes.NoCliente = NoTelefonoClientes.NoCliente; 

--PROCEDIMIENTO ALMACENADO PARA GENERAR CLAVE DEL CLIENTE
DELIMITER %%
CREATE PROCEDURE generarCodigoCliente()
BEGIN
    DECLARE contador INT;
		DECLARE nocli varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM clientes); 
        IF(contador<10)THEN
            SET nocli= CONCAT('Cl-00',contador);
            ELSE IF(contador<100) THEN
                SET nocli= CONCAT('Cl-0',contador);
                ELSE IF(contador<1000)THEN
                    SET nocli= CONCAT('Cl-',contador);
                END IF;
            END IF;
        END IF; 
	END;
	INSERT INTO clientes(NoCliente) VALUES (nocli); 
	SELECT NoCliente FROM clientes WHERE NoCliente = nocli; 	
END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA INSERTAR DATOS DE LOS CLIENTES
DELIMITER %%
CREATE PROCEDURE insertarDatosClientes(IN nocli varchar(10), IN nomcli varchar(20), IN apepat varchar(20), 
IN apemat varchar(20), IN calle varchar(20), IN noext varchar(20), IN col varchar(20), 
IN cp varchar(20), IN muni varchar(20), IN estado varchar(20), IN telefono varchar(13))
BEGIN 
UPDATE clientes SET Nombre = nomcli, ApellidoPat = apepat, ApellidoMat = apemat, 
Calle = calle, noExterior = noext, colonia = col, CP = cp, Municipio = muni, 
Estado = estado 
WHERE NoCliente = nocli;  
INSERT INTO NoTelefonoClientes VALUES (nocli, telefono);
END %%
DELIMITER ; 

--PROCEDIMIENTO PARA ACTUALIZAR CLIENTES
DELIMITER %%
CREATE PROCEDURE actualizarClientes(IN nocli varchar(10), IN nomcli varchar(20), IN apepat varchar(20), 
IN apemat varchar(20), IN calle varchar(20), IN noext varchar(20), IN col varchar(20), 
IN cp varchar(20), IN muni varchar(20), IN estado varchar(20), IN telefono varchar(13))
BEGIN 
UPDATE clientes SET Nombre = nomcli, ApellidoPat = apepat, ApellidoMat = apemat, 
Calle = calle, noExterior = noext, colonia = col, CP = cp, Municipio = muni, 
Estado = estado 
WHERE NoCliente = nocli;  
UPDATE NoTelefonoClientes SET NoTelefono = telefono WHERE NoCliente = nocli; 

END %%
DELIMITER ; 


--VISTA PROVEEDORES 
CREATE VIEW vistaProveedores AS 
SELECT proveedores.CodigoProveedor, Compañia, NombreContacto, ApellidoPat, ApellidoMat, Calle, noExterior, colonia, 
CP, Municipio, Estado, telefono, eMail FROM 
proveedores, TelefonoProveedores, eMailProveedores 
WHERE proveedores.CodigoProveedor = TelefonoProveedores.CodigoProveedor 
AND proveedores.CodigoProveedor = eMailProveedores.CodigoProveedor; 

--VISTA EMPLEADOS 
CREATE VIEW vistaEmpleados AS
SELECT Empleados.Noempleado, Nombre, ApellidoPat, ApellidoMat, Calle, noExterior, colonia, CP, 
Municipio, Estado, Sueldo, Puesto, CURP, NoTelefono FROM Empleados, CURPEmpleados, 
NoTelefonoEmpleados WHERE Empleados.NoEmpleado = CURPEmpleados.NoEmpleado AND 
Empleados.NoEmpleado = NoTelefonoEmpleados.NoEmpleado;

--PROCEDIMIENTO ALMACENADO PARA INSERTAR EMPLEADOS CON CLAVE GENERADA AUTOMATICAMENTE
DELIMITER %%
CREATE PROCEDURE insertarDatosEmpleado(IN nombremp varchar(20), IN apepat 
varchar(20), IN apemat varchar(20), IN calle varchar(20), IN noext varchar(20), 
IN col varchar(20), IN cp varchar(10), IN muni varchar(20), IN estado varchar(20), 
IN sueldo float, IN puesto varchar(20), IN curp varchar(18), IN telefono varchar(13))
BEGIN
    DECLARE contador INT;
		DECLARE noEmp varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM Empleados); 
        IF(contador<10)THEN
            SET noEmp= CONCAT('Em-00',contador);
            ELSE IF(contador<100) THEN
                SET noEmp= CONCAT('Em-0',contador);
                ELSE IF(contador<1000)THEN
                    SET noEmp= CONCAT('Em-',contador);
                END IF;
            END IF;
        END IF; 
	END;
INSERT INTO Empleados VALUES (noEmp, nombremp, apepat, apemat, calle, noext, col, cp, muni, estado, 
sueldo, puesto);   
INSERT INTO CURPEmpleados VALUES (noEmp, curp); 
INSERT INTO NoTelefonoEmpleados VALUES (noEmp, telefono); 
END %%
DELIMITER ;

--PROCEDIMIENTO ALMACENADO PARA INSERTAR CATEGORIAS CON CLAVE GENERADA AUTOMATICAMENTE
DELIMITER %%
CREATE PROCEDURE crearCategoria(IN nomCat varchar(10), 
IN descrip varchar(100))
BEGIN
    DECLARE contador INT;
		DECLARE claveCat varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM Categorias); 
        IF(contador<10)THEN
            SET claveCat= CONCAT('C-00',contador);
            ELSE IF(contador<100) THEN
                SET claveCat= CONCAT('C-0',contador);
                ELSE IF(contador<1000)THEN
                    SET claveCat= CONCAT('C-',contador);
                END IF;
            END IF;
        END IF; 
	END;
INSERT INTO Categorias VALUES (claveCat, nomCat, descrip); 
END %%
DELIMITER ;

--PROCEDIMIENTO ALMACENADO PARA INSERTAR PROVEEDORES CON CLAVE GENERADA AUTOMATICAMENTE
DELIMITER %% 
CREATE PROCEDURE insertarProveedor(IN compañia varchar(20), IN nombcon varchar(20), 
IN apepat varchar(20), IN apemat varchar(20), IN calle varchar(20), IN noext varchar(10), IN colonia varchar(10), 
IN cp varchar(10), IN municipio varchar(20), IN estado varchar(20), IN telefono varchar(13), 
IN email varchar(30))
BEGIN
    DECLARE contador INT;
		DECLARE codProv varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM Proveedores); 
        IF(contador<10)THEN
            SET codProv= CONCAT('pv-00',contador);
            ELSE IF(contador<100) THEN
                SET codProv= CONCAT('pv-0',contador);
                ELSE IF(contador<1000)THEN
                    SET codProv= CONCAT('pv-',contador);
                END IF;
            END IF;
        END IF; 
	END;
INSERT INTO Proveedores VALUES (codProv, compañia, nombcon, apepat, apemat, calle, noext, colonia, 
cp, municipio, estado); 

INSERT INTO TelefonoProveedores VALUES (codProv, telefono); 
INSERT INTO eMailProveedores VALUES (codProv, email); 
END %%
DELIMITER ;

--PROCEDIMIENTO PARA GENERAR EL CODIGO DE LOS PRODUCTOS 
DELIMITER %% 
CREATE PROCEDURE codigoProductos()
BEGIN 
	DECLARE contador int; 
	DECLARE codprod varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM Productos); 
        IF(contador<10)THEN
            SET codprod= CONCAT('P-00',contador);
            ELSE IF(contador<100) THEN
                SET codprod= CONCAT('P-0',contador);
                ELSE IF(contador<1000)THEN
                    SET codprod= CONCAT('P-',contador);
                END IF;
            END IF;
        END IF; 
	END; 
	INSERT INTO productos (codigoProducto) VALUES (codprod); 
	SELECT codigoProducto FROM Productos WHERE codigoProducto = codprod; 	
END %% 
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA INSERTAR PRODUCTOS
DELIMITER %% 
CREATE PROCEDURE insertarProductos(IN codprod varchar(10), IN nomprod varchar(20), 
IN descripcion varchar(100), IN stock tinyint, IN precio float, IN codprove varchar(10), 
IN clavcat varchar(10))
BEGIN
UPDATE productos SET NombreProducto = nomprod, Descripcion = descripcion, 
Stock = stock, Precio = precio, CodigoProveedor = codprove, ClaveCategoria = clavcat
WHERE CodigoProducto = codprod;    

END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA GENERAR NUEVA VENTA 
DELIMITER %%
CREATE PROCEDURE hacerNuevaVenta()
BEGIN
    DECLARE contador INT;
		DECLARE numemp varchar(10);
		DECLARE noven varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM ventasFisicas); 
        IF(contador<10)THEN
            SET noven= CONCAT('V-00',contador);
            ELSE IF(contador<100) THEN
                SET noven= CONCAT('V-0',contador);
                ELSE IF(contador<1000)THEN
                    SET noven= CONCAT('V-',contador);
                END IF;
            END IF;
        END IF; 
	END; 
	SET numemp=(SELECT NoEmpleado FROM entradasSalidas WHERE HoraSalidas IS NULL);
	
INSERT INTO ventasFisicas VALUES (noven, NOW(), 0, numemp);
SELECT NoVenta, NoEmpleado FROM ventasFisicas WHERE NoVenta = noven; 
END %%
DELIMITER ;

--PROCEDIMIENTO ALMACENADO PARA VERIFICAR EL STOCK DE PRODUCTOS PARA UNA VENTA 
DELIMITER %%
CREATE PROCEDURE verificarStock(IN codprod varchar(10))
BEGIN 
	SELECT Stock FROM Productos WHERE CodigoProducto = codprod; 
END %% 
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA LA TABLA tiene QUE AGREGA LOS PRODUCTOS
DELIMITER %%
CREATE PROCEDURE agregarProductoaVenta(IN noven varchar(10), IN codprod varchar(10), IN cantidad tinyint)
BEGIN
	DECLARE preciop float; 
	DECLARE sub float; 
	DECLARE nom varchar(20); 
	SET nom = (SELECT NombreProducto FROM productos WHERE CodigoProducto = codprod); 
	UPDATE productos SET Stock = Stock - cantidad WHERE CodigoProducto = codprod; 
	SET preciop = (SELECT Precio FROM productos WHERE codigoProducto = codprod); 
	SET sub = preciop * cantidad; 
	INSERT INTO tiene VALUES (noven, codprod, nom, cantidad, preciop, sub); 
END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA MOSTRAR LOS PRODUCTOS DE UNA DETERMINADA VENTA 
DELIMITER %%
CREATE PROCEDURE mostrarProductosVen(IN noven varchar(10))
BEGIN 
	SELECT codigoProducto, NombreProducto, CantidadProducto, PrecioProducto, Subtotal 
	FROM tiene
	WHERE NoVenta = noven; 
END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO QUE CALCULA EL TOTAL DE LAS VENTAS 
DELIMITER %%
CREATE PROCEDURE calcularTotalVen2(IN noven varchar(10), IN subtot float)
BEGIN
	UPDATE ventasFisicas SET TotalVenta = subtot WHERE NoVenta = noven; 
END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA INSERTAR UN NUEVO CLIENTE 
DELIMITER %%
CREATE PROCEDURE insertarCliente(IN nomcli varchar(20), IN apepat varchar(20), 
IN apemat varchar(20), IN calle varchar(20), IN noext varchar(20), IN colonia varchar(20), 
IN cp varchar(20), IN municipio varchar(20), IN estado varchar(20), IN telefono varchar(13))
BEGIN
    DECLARE contador INT;
		DECLARE nocli varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM clientes); 
        IF(contador<10)THEN
            SET nocli= CONCAT('Cl-00',contador);
            ELSE IF(contador<100) THEN
                SET nocli= CONCAT('Cl-0',contador);
                ELSE IF(contador<1000)THEN
                    SET nocli= CONCAT('Cl-',contador);
                END IF;
            END IF;
        END IF; 
	END; 
INSERT INTO clientes VALUES (nocli, nomcli, apepat, apemat, calle, noext, colonia, 
cp, municipio, estado);

INSERT INTO NoTelefonoClientes VALUES (nocli, telefono);
END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA REGISTRAR ENTRADA AL PROGRAMA
DELIMITER %%
CREATE PROCEDURE registrarEntrada(IN noemp varchar(10))
BEGIN
    DECLARE contador INT;
		DECLARE idOpe VARCHAR(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM entradasSalidas); 
        IF(contador<10)THEN
            SET idOpe= CONCAT('Op-00',contador);
            ELSE IF(contador<100) THEN
                SET idOpe= CONCAT('Op-0',contador);
                ELSE IF(contador<1000)THEN
                    SET idOpe= CONCAT('Op-',contador);
                END IF;
            END IF;
        END IF; 
	END; 

INSERT INTO entradasSalidas VALUES (idOpe, NOW(), null, noemp); 
END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA REGISTRAR SALIDAD DEL PROGRAMA 
DELIMITER %%
CREATE PROCEDURE registrarSalida()
BEGIN 
UPDATE entradasSalidas SET HoraSalidas = NOW() WHERE HoraSalidas IS NULL; 
END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA REGISTRAR USUARIO 
DELIMITER %%
CREATE PROCEDURE registrarUsuario(IN noEmp varchar(10), IN contra varchar(8))
BEGIN 
INSERT INTO Usuarios VALUES (noEmp, contra); 
END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA CONTAR EL SUBTOTAL DE UNA VENTA 
DELIMITER %% 
CREATE PROCEDURE subtotalDeLaVenta(IN noven varchar(10))
BEGIN 
SELECT SUM(Subtotal) FROM tiene WHERE NoVenta = noven; 
END %% 
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA ELIMINAR PRODUCTO DE TABLA TIENE 
DELIMITER %%
CREATE PROCEDURE eliminarProductoVenta(IN noven varchar(10), IN codprod varchar(10))
BEGIN 
DELETE FROM tiene WHERE NoVenta = noven AND CodigoProducto = codprod; 
END %% 
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA JALAR EL PRODUCTO DE LA TABLA TIENE 
DELIMITER %%
CREATE PROCEDURE productoVenta(IN noven varchar(10), IN codprod varchar(10))
BEGIN 
SELECT codigoProducto, NombreProducto, CantidadProducto, PrecioProducto, Subtotal
FROM tiene WHERE NoVenta = noven AND codigoProducto = codprod; 
END %%
DELIMITER ; 

--AGREGAR LOS PROCEDIMIENTOS ALMACENADOS PARA ENTREGAS. SON LOS MISMOS QUE LOS DE VENTASFISICAS
--PERO FUNCIONARAN DISTINTO (PENSAR EN LA LÓGICA)
--PROCEDIMIENTO QUE INSERTA EL NUMERO DE LA ENTREGA, NUMERO DE CLIENTE Y NO DE EMPLEADO
DELIMITER %%
CREATE PROCEDURE hacerEntrega(IN numEmp varchar(10))
BEGIN 
	DECLARE contador INT; 
	DECLARE noentrega varchar(10); 
	BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM entregas); 
        IF(contador<10)THEN
            SET noentrega= CONCAT('en-00',contador);
            ELSE IF(contador<100) THEN
                SET noentrega= CONCAT('en-0',contador);
                ELSE IF(contador<1000)THEN
                    SET noentrega= CONCAT('en-',contador);
                END IF;
            END IF;
        END IF; 
	END; 
INSERT INTO entregas VALUES (noentrega, NOW(), NULL, 0, numEmp, 'NO CLIENTE'); 
END %%
DELIMITER ; 


--PROCEDIMIENTO QUE INSERTA LOS PRODUCTOS EN LA ENTREGA 
DELIMITER %%
CREATE PROCEDURE agregarProductoaEntrega(IN noEntre varchar(10), IN codprod varchar(10), IN cantidad tinyint)
BEGIN 
	DECLARE preciop float; 
	DECLARE sub float; 
	
	SET preciop = (SELECT Precio FROM productos WHERE codigoProducto = codprod); 
	SET sub = preciop * cantidad; 
	INSERT INTO existe VALUES (noEntre, codprod, preciop, cantidad, sub); 
END %%
DELIMITER ; 


--PROCEDIMIENTO QUE CALCULA EL TOTAL DE LA ENTREGA 
DELIMITER %% 
CREATE PROCEDURE totalEntrega(IN noEntre varchar(10))
BEGIN 
	DECLARE sumador float; 
	SET sumador = (SELECT SUM(SubtotalE) FROM existe WHERE NoEntrega = noEntre); 
	UPDATE entregas SET Total = sumador WHERE NoEntrega = noEntre; 
END %%
DELIMITER ; 

--PROCEDIMIENTO PARA PONER EL METODO DE PAGO Y TIPO DE ENVIO 
DELIMITER %% 
CREATE PROCEDURE tipoPagoEnvio(IN noEntre varchar(10), IN tipoPago varchar(20), IN tipoEnvio varchar(20))
BEGIN 
	INSERT INTO MetodoPagoEntregas VALUES (noEntre, tipoPago); 
	INSERT INTO TipoEnvioEntregas VALUES (noEntre, tipoEnvio); 
END %%
DELIMITER ; 

-----------------------------------------------------------------------
--PROCEDIMIENTO ALMACENADO PARA GENERAR NUEVA VENTA 
DELIMITER %%
CREATE PROCEDURE hacerNuevaVenta()
BEGIN
    DECLARE contador INT;
		DECLARE numemp varchar(10);
		DECLARE noven varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM ventasFisicas); 
        IF(contador<10)THEN
            SET noven= CONCAT('V-00',contador);
            ELSE IF(contador<100) THEN
                SET noven= CONCAT('V-0',contador);
                ELSE IF(contador<1000)THEN
                    SET noven= CONCAT('V-',contador);
                END IF;
            END IF;
        END IF; 
	END; 
	SET numemp=(SELECT NoEmpleado FROM entradasSalidas WHERE HoraSalidas IS NULL);
	
INSERT INTO ventasFisicas VALUES (noven, NOW(), 0, numemp);
SELECT NoVenta, NoEmpleado FROM ventasFisicas WHERE NoVenta = noven; 
END %%
DELIMITER ;

--PROCEDIMIENTO ALMACENADO PARA GENERAR NUEVA ENTREGA 
DELIMITER %% 
CREATE PROCEDURE hacerNuevaEntrega(nocli VARCHAR(10))
BEGIN 
	DECLARE contador INT; 
	DECLARE numemp varchar(10); 
	DECLARE noentre varchar(10);
	BEGIN 
        SET contador= (SELECT COUNT(*)+1 FROM Entregas); 
        IF(contador<10)THEN
            SET noentre= CONCAT('en-00',contador);
            ELSE IF(contador<100) THEN
                SET noentre= CONCAT('en-0',contador);
                ELSE IF(contador<1000)THEN
                    SET noentre= CONCAT('en-',contador);
                END IF;
            END IF;
        END IF; 
	END; 
	SET numemp=(SELECT NoEmpleado FROM entradasSalidas WHERE HoraSalidas IS NULL);	 
INSERT INTO entregas VALUES (noentre, NOW(), NULL, 0, numEmp, nocli); 
SELECT NoEntrega, NoEmpleado FROM entregas WHERE NoEntrega = noentre; 
END %%
DELIMITER ; 
CALL hacerNuevaEntrega(); 

--PROCEDIMIENTO PARA VERIFICAR STOCK 
--Es el mismo que en el de venta 
DELIMITER %%
CREATE PROCEDURE agregarProductoaVenta(IN noven varchar(10), IN codprod varchar(10), IN cantidad tinyint)
BEGIN
	DECLARE preciop float; 
	DECLARE sub float; 
	DECLARE nom varchar(20); 
	SET nom = (SELECT NombreProducto FROM productos WHERE CodigoProducto = codprod); 
	UPDATE productos SET Stock = Stock - cantidad WHERE CodigoProducto = codprod; 
	SET preciop = (SELECT Precio FROM productos WHERE codigoProducto = codprod); 
	SET sub = preciop * cantidad; 
	INSERT INTO tiene VALUES (noven, codprod, nom, cantidad, preciop, sub); 
END %%
DELIMITER ; 
CALL agregarProductoaVenta (); 

--PROCEDIMIENTO AGREGAR PRODUCTO A ENTREGA 
DELIMITER %% 
CREATE PROCEDURE agregarProductoaEntrega(IN noentre varchar(10), IN codprod varchar(10), IN cant tinyint)
BEGIN 
	DECLARE preciop float; 
	DECLARE sub float; 
	DECLARE nom varchar(20); 
	SET nom = (SELECT NombreProducto FROM productos WHERE CodigoProducto = codprod); 
	UPDATE productos SET Stock = Stock - cant WHERE CodigoProducto = codprod; 
	SET preciop = (SELECT Precio FROM productos WHERE codigoProducto = codprod); 
	SET sub = preciop * cant; 
	INSERT INTO existe VALUES (noentre, codprod, nom, cant, preciop, sub); 
END %%
DELIMITER ; 

DELIMITER %%
CREATE PROCEDURE productoVenta(IN noven varchar(10), IN codprod varchar(10))
BEGIN 
SELECT codigoProducto, NombreProducto, CantidadProducto, PrecioProducto, Subtotal
FROM tiene WHERE NoVenta = noven AND codigoProducto = codprod; 
END %%
DELIMITER ; 
--PROCEDIMIENTO PARA PRODUCTO ENTREGA (LISTAR PRODUCTO EN EXISTE) 
DELIMITER %% 
CREATE PROCEDURE productoEntrega(IN noentre varchar(10), IN codprod varchar(10))
BEGIN 
SELECT codigoProducto, nombreProducto, CantidadE, PrecioProductoE, SubtotalE 
FROM existe WHERE NoEntrega = noentre AND codigoProducto = codprod; 
END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA CONTAR EL SUBTOTAL DE UNA ENTREGA
DELIMITER %% 
CREATE PROCEDURE subtotalDeLaEntrega(IN noentre varchar(10))
BEGIN 
SELECT SUM(SubtotalE) FROM existe WHERE NoEntrega = noentre; 
END %% 
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA ELIMINAR EL PRODUCTO 
DELIMITER %%
CREATE PROCEDURE eliminarProductoEntrega(IN noentre varchar(10), IN codprod varchar(10))
BEGIN 
DELETE FROM existe WHERE NoEntrega = noentre AND CodigoProducto = codprod; 
END %% 
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO QUE CALCULA EL TOTAL DE LA ENTREGA y la registra
DELIMITER %%
CREATE PROCEDURE registrarEntrega(IN noentre varchar(10), IN subtot float, IN noCli varchar(10))
BEGIN
	UPDATE entregas SET Total = subtot, NoCliente = noCli WHERE NoEntrega = noentre; 
	INSERT INTO estatusentregas VALUES(noentre , 'Procesando'); 
END %%
DELIMITER ; 
CALL calcularTotalVen2(); 

--PROCEDIMIENTO ALMACENADO QUE ACTUALIZA LA ENTREGA
DELIMITER %%
CREATE PROCEDURE actualizarEntrega(IN noentre varchar(10), IN fechaentre DATETIME)
BEGIN
	UPDATE entregas SET FechaEntrega = fechaentre WHERE NoEntrega = noentre;
END %%
DELIMITER ; 
CALL calcularTotalVen2(); 

--PROCEDIMIENTO ALMACENADO QUE ELIMINA LA ENTREGA
DELIMITER %%
CREATE PROCEDURE eliminarEntrega(IN noentre varchar(10))
BEGIN 
DELETE FROM entregas WHERE NoEntrega = noentre; 
END %%
DELIMITER ;

-------------------------------------------------------------------
--PROCEDIMIENTO ALMACENADO PARA GENERAR NUEVA ENTREGA 
DELIMITER %% 
CREATE PROCEDURE registrarNuevoProv()
BEGIN 
    DECLARE contador INT;
		DECLARE codProv varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM Proveedores); 
        IF(contador<10)THEN
            SET codProv= CONCAT('pv-00',contador);
            ELSE IF(contador<100) THEN
                SET codProv= CONCAT('pv-0',contador);
                ELSE IF(contador<1000)THEN
                    SET codProv= CONCAT('pv-',contador);
                END IF;
            END IF;
        END IF; 
	END;
	INSERT INTO Proveedores(CodigoProveedor) VALUES (codProv); 
	SELECT CodigoProveedor FROM Proveedores WHERE CodigoProveedor = codProv; 
END %%
DELIMITER ; 
CALL registrarNuevoProv(); 

--PROCEDIMIENTO PARA AGREGAR PROVEEDOR 
DELIMITER %%
CREATE PROCEDURE insertarProveedor2(IN codProv varchar(10), IN compa varchar(20), IN nombcon varchar(20), 
IN apepat varchar(20), IN apemat varchar(20), IN calle varchar(20), IN noext varchar(10), IN colonia varchar(10), 
IN cp varchar(10), IN municipio varchar(20), IN estado varchar(20), IN telefono varchar(13), 
IN email varchar(30))
BEGIN

UPDATE Proveedores SET Compañia = compa, NombreContacto = nombcon, ApellidoPat = apepat, 
ApellidoMat = apemat, Calle = calle, noExterior = noext, Colonia = colonia, CP = cp, Municipio = municipio, 
Estado = estado WHERE CodigoProveedor = codProv; 

INSERT INTO TelefonoProveedores VALUES (codProv, telefono); 
INSERT INTO eMailProveedores VALUES (codProv, email); 
END %%

--PROCEDIMIENTO PARA ACTUALIZAR PROVEEDOR 
DELIMITER %% 
CREATE PROCEDURE actualizarProveedor(IN codProv varchar(10), IN compa varchar(20), IN nombcon varchar(20), 
IN apepat varchar(20), IN apemat varchar(20), IN calle varchar(20), IN noext varchar(10), IN colonia varchar(10), 
IN cp varchar(10), IN municipio varchar(20), IN estado varchar(20), IN telefono varchar(13), 
IN email varchar(30))
BEGIN 
UPDATE Proveedores SET Compañia = compa, NombreContacto = nombcon, ApellidoPat = apepat, 
ApellidoMat = apemat, Calle = calle, noExterior = noext, CP = cp, Municipio = municipio, 
Estado = estado WHERE CodigoProveedor = codProv; 
UPDATE TelefonoProveedores SET telefono = telefono WHERE CodigoProveedor = codProv;
UPDATE eMailProveedores SET eMail = email WHERE CodigoProveedor = codProv;
END %%

-----------------------------------------------------------------------
--PROCEDIMIENTO ALMACENADO PARA GENERAR NUEVA VENTA 
DELIMITER %%
CREATE PROCEDURE hacerNuevaVenta()
BEGIN
    DECLARE contador INT;
		DECLARE numemp varchar(10);
		DECLARE noven varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM ventasFisicas); 
        IF(contador<10)THEN
            SET noven= CONCAT('V-00',contador);
            ELSE IF(contador<100) THEN
                SET noven= CONCAT('V-0',contador);
                ELSE IF(contador<1000)THEN
                    SET noven= CONCAT('V-',contador);
                END IF;
            END IF;
        END IF; 
	END; 
	SET numemp=(SELECT NoEmpleado FROM entradasSalidas WHERE HoraSalidas IS NULL);
	
INSERT INTO ventasFisicas VALUES (noven, NOW(), 0, numemp);
SELECT NoVenta, NoEmpleado FROM ventasFisicas WHERE NoVenta = noven; 
END %%
DELIMITER ;

--PROCEDIMIENTO ALMACENADO PARA GENERAR NUEVA ENTREGA 
DELIMITER %% 
CREATE PROCEDURE hacerNuevaEntrega(nocli VARCHAR(10))
BEGIN 
	DECLARE contador INT; 
	DECLARE numemp varchar(10); 
	DECLARE noentre varchar(10);
	BEGIN 
        SET contador= (SELECT COUNT(*)+1 FROM Entregas); 
        IF(contador<10)THEN
            SET noentre= CONCAT('en-00',contador);
            ELSE IF(contador<100) THEN
                SET noentre= CONCAT('en-0',contador);
                ELSE IF(contador<1000)THEN
                    SET noentre= CONCAT('en-',contador);
                END IF;
            END IF;
        END IF; 
	END; 
	SET numemp=(SELECT NoEmpleado FROM entradasSalidas WHERE HoraSalidas IS NULL);	 
INSERT INTO entregas VALUES (noentre, NOW(), NULL, 0, numEmp, nocli); 
SELECT NoEntrega, NoEmpleado FROM entregas WHERE NoEntrega = noentre; 
END %%
DELIMITER ; 
CALL hacerNuevaEntrega(); 

--PROCEDIMIENTO PARA VERIFICAR STOCK 
--Es el mismo que en el de venta 
DELIMITER %%
CREATE PROCEDURE agregarProductoaVenta(IN noven varchar(10), IN codprod varchar(10), IN cantidad tinyint)
BEGIN
	DECLARE preciop float; 
	DECLARE sub float; 
	DECLARE nom varchar(20); 
	SET nom = (SELECT NombreProducto FROM productos WHERE CodigoProducto = codprod); 
	UPDATE productos SET Stock = Stock - cantidad WHERE CodigoProducto = codprod; 
	SET preciop = (SELECT Precio FROM productos WHERE codigoProducto = codprod); 
	SET sub = preciop * cantidad; 
	INSERT INTO tiene VALUES (noven, codprod, nom, cantidad, preciop, sub); 
END %%
DELIMITER ; 
CALL agregarProductoaVenta (); 

--PROCEDIMIENTO AGREGAR PRODUCTO A ENTREGA 
DELIMITER %% 
CREATE PROCEDURE agregarProductoaEntrega(IN noentre varchar(10), IN codprod varchar(10), IN cant tinyint)
BEGIN 
	DECLARE preciop float; 
	DECLARE sub float; 
	DECLARE nom varchar(20); 
	SET nom = (SELECT NombreProducto FROM productos WHERE CodigoProducto = codprod); 
	UPDATE productos SET Stock = Stock - cant WHERE CodigoProducto = codprod; 
	SET preciop = (SELECT Precio FROM productos WHERE codigoProducto = codprod); 
	SET sub = preciop * cant; 
	INSERT INTO existe VALUES (noentre, codprod, nom, cant, preciop, sub); 
END %%
DELIMITER ; 

DELIMITER %%
CREATE PROCEDURE productoVenta(IN noven varchar(10), IN codprod varchar(10))
BEGIN 
SELECT codigoProducto, NombreProducto, CantidadProducto, PrecioProducto, Subtotal
FROM tiene WHERE NoVenta = noven AND codigoProducto = codprod; 
END %%
DELIMITER ; 
--PROCEDIMIENTO PARA PRODUCTO ENTREGA (LISTAR PRODUCTO EN EXISTE) 
DELIMITER %% 
CREATE PROCEDURE productoEntrega(IN noentre varchar(10), IN codprod varchar(10))
BEGIN 
SELECT codigoProducto, nombreProducto, CantidadE, PrecioProductoE, SubtotalE 
FROM existe WHERE NoEntrega = noentre AND codigoProducto = codprod; 
END %%
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA CONTAR EL SUBTOTAL DE UNA ENTREGA
DELIMITER %% 
CREATE PROCEDURE subtotalDeLaEntrega(IN noentre varchar(10))
BEGIN 
SELECT SUM(SubtotalE) FROM existe WHERE NoEntrega = noentre; 
END %% 
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO PARA ELIMINAR EL PRODUCTO 
DELIMITER %%
CREATE PROCEDURE eliminarProductoEntrega(IN noentre varchar(10), IN codprod varchar(10))
BEGIN 
DELETE FROM existe WHERE NoEntrega = noentre AND CodigoProducto = codprod; 
END %% 
DELIMITER ; 

--PROCEDIMIENTO ALMACENADO QUE CALCULA EL TOTAL DE LA ENTREGA y la registra
DELIMITER %%
CREATE PROCEDURE registrarEntrega(IN noentre varchar(10), IN subtot float, IN noCli varchar(10))
BEGIN
	UPDATE entregas SET Total = subtot, NoCliente = noCli WHERE NoEntrega = noentre; 
	INSERT INTO estatusentregas VALUES(noentre , 'Procesando'); 
END %%
DELIMITER ; 
CALL calcularTotalVen2(); 

--PROCEDIMIENTO ALMACENADO QUE ACTUALIZA LA ENTREGA
DELIMITER %%
CREATE PROCEDURE actualizarEntrega(IN noentre varchar(10), IN fechaentre DATETIME)
BEGIN
	UPDATE entregas SET FechaEntrega = fechaentre WHERE NoEntrega = noentre;
END %%
DELIMITER ; 
CALL calcularTotalVen2(); 

--PROCEDIMIENTO ALMACENADO QUE ELIMINA LA ENTREGA
DELIMITER %%
CREATE PROCEDURE eliminarEntrega(IN noentre varchar(10))
BEGIN 
DELETE FROM entregas WHERE NoEntrega = noentre; 
END %%
DELIMITER ;

-------------------------------------------------------------------
--PROCEDIMIENTO ALMACENADO PARA GENERAR NUEVA ENTREGA 
DELIMITER %% 
CREATE PROCEDURE registrarNuevoProv()
BEGIN 
    DECLARE contador INT;
		DECLARE codProv varchar(10); 
    BEGIN
        SET contador= (SELECT COUNT(*)+1 FROM Proveedores); 
        IF(contador<10)THEN
            SET codProv= CONCAT('pv-00',contador);
            ELSE IF(contador<100) THEN
                SET codProv= CONCAT('pv-0',contador);
                ELSE IF(contador<1000)THEN
                    SET codProv= CONCAT('pv-',contador);
                END IF;
            END IF;
        END IF; 
	END;
	INSERT INTO Proveedores(CodigoProveedor) VALUES (codProv); 
	SELECT CodigoProveedor FROM Proveedores WHERE CodigoProveedor = codProv; 
END %%
DELIMITER ; 
CALL registrarNuevoProv(); 

--PROCEDIMIENTO PARA AGREGAR PROVEEDOR 
DELIMITER %%
CREATE PROCEDURE insertarProveedor2(IN codProv varchar(10), IN compa varchar(20), IN nombcon varchar(20), 
IN apepat varchar(20), IN apemat varchar(20), IN calle varchar(20), IN noext varchar(10), IN colonia varchar(10), 
IN cp varchar(10), IN municipio varchar(20), IN estado varchar(20), IN telefono varchar(13), 
IN email varchar(30))
BEGIN

UPDATE Proveedores SET Compañia = compa, NombreContacto = nombcon, ApellidoPat = apepat, 
ApellidoMat = apemat, Calle = calle, noExterior = noext, Colonia = colonia, CP = cp, Municipio = municipio, 
Estado = estado WHERE CodigoProveedor = codProv; 

INSERT INTO TelefonoProveedores VALUES (codProv, telefono); 
INSERT INTO eMailProveedores VALUES (codProv, email); 
END %%

--PROCEDIMIENTO PARA ACTUALIZAR PROVEEDOR 
DELIMITER %% 
CREATE PROCEDURE actualizarProveedor(IN codProv varchar(10), IN compa varchar(20), IN nombcon varchar(20), 
IN apepat varchar(20), IN apemat varchar(20), IN calle varchar(20), IN noext varchar(10), IN colonia varchar(10), 
IN cp varchar(10), IN municipio varchar(20), IN estado varchar(20), IN telefono varchar(13), 
IN email varchar(30))
BEGIN 
UPDATE Proveedores SET Compañia = compa, NombreContacto = nombcon, ApellidoPat = apepat, 
ApellidoMat = apemat, Calle = calle, noExterior = noext, CP = cp, Municipio = municipio, 
Estado = estado WHERE CodigoProveedor = codProv; 
UPDATE TelefonoProveedores SET telefono = telefono WHERE CodigoProveedor = codProv;
UPDATE eMailProveedores SET eMail = email WHERE CodigoProveedor = codProv;
END %%


--PROCEDIMIENTO ALMACENADO QUE VERIFICA SI UN PRODUCTO ESTÁ BAJO DE STOCK 
DELIMITER %%
CREATE PROCEDURE verificarStockBajo()
BEGIN 
SELECT codigoProducto, NombreProducto, Stock FROM Productos WHERE Stock < 5; 
END %%

--PROCEDIMIENTO ALMACENADO QUE VERIFICA LAS ENTREGAS QUE NO ESTAN ENTREGADAS O ESTÁN EN 
--PROCESO
DELIMITER %%
CREATE PROCEDURE verificarEntregasSinEntregar()
BEGIN 
SELECT NoEntrega, Estatus FROM estatusEntregas WHERE Estatus = 'Procesando' OR Estatus = 'No entregado';

END %%
DELIMITER ; 

CREATE VIEW vistaEntregas AS
SELECT Entregas.NoEntrega, FechaPedido, FechaEntrega, Total, NoEmpleado, NoCliente, TipoEnvio, 
MetodoPago, Estatus FROM Entregas, metodoPagoEntregas, estatusEntregas, tipoEnvioEntregas
WHERE Entregas.NoEntrega = metodoPagoEntregas.NoEntrega AND Entregas.NoEntrega = estatusEntregas.NoEntrega
AND Entregas.NoEntrega = tipoEnvioEntregas.NoEntrega; 

--PROCEDIMIENTO PARA VER LOS PRODUCTOS DE LA VENTA 
DELIMITER %%
CREATE PROCEDURE verProductosVenta(IN noven varchar(10))
BEGIN 
SELECT codigoProducto, NombreProducto, CantidadProducto, PrecioProducto, Subtotal 
FROM tiene WHERE NoVenta = noven; 
END %%
DELIMITER ; 

--PROCEDIMIENTO PARA VER EL TOTAL DE UNA VENTA 
DELIMITER %% 
CREATE PROCEDURE verTotalVenta(IN noven varchar(10))
BEGIN 
SELECT TotalVenta FROM ventasFisicas WHERE NoVenta = noven; 
END %%
DELIMITER ; 

--PROCEDIMIENTO PARA VER LOS DATOS DE LAS ENTREGAS 
DELIMITER %%
CREATE PROCEDURE datosEntregas(IN nocli varchar(10))
BEGIN 
SELECT NoCliente, Nombre, ApellidoPat, ApellidoMat, Calle, noExterior, colonia, CP, 
Municipio, Estado FROM clientes WHERE NoCliente = nocli; 
END %%
DELIMITER ;

--PROCEDIMIENTO PARA VER EL SUBTOTAL Y TOTAL DE LA VENTA
DELIMITER %%
CREATE PROCEDURE subtotalTotalEntrega(IN noentre varchar(10))
BEGIN 
SELECT SUM(SubtotalE) FROM existe WHERE NoEntrega = noentre; 

END %%
DELIMITER ; 


--CALCULAR COSTO TOTAL DEL INVENTARIO 
DELIMITER %%
CREATE PROCEDURE costoTotalInv()
BEGIN 
SELECT SUM(Precio*Stock) FROM productos; 
END %%
DELIMITER ; 

--CALCULAR CANTIDAD DEL INVENTARIO 
DELIMITER %%
CREATE PROCEDURE totalProductosInv()
BEGIN 
SELECT SUM(Stock) FROM productos; 
END %%
DELIMITER ; 

--PROCEDIMIENTO PARA ELIMINAR VENTA (CANCELARLA) 
DELIMITER %%
CREATE PROCEDURE cancelarVenta(IN noven varchar(10))
BEGIN 
--DECLARE codigopro varchar(10); 
--DECLARE cantipro tinyint; 
--SET codigopro = (SELECT codigoProducto FROM tiene WHERE NoVenta = noven); 
--SET cantipro = (SELECT cantipro FROM tiene WHERE NoVenta = noven AND codigoProducto = codigopro); 
--UPDATE inventario SET Stock = Stock + cantipro WHERE CodigoProducto = codigopro; 
DELETE FROM ventasFisicas WHERE NoVenta = noven; 
END %%
DELIMITER ;  

--PROCEDIMIENTOS PARA ACTUALIZAR EL ESTADO DE LA ENTREGA 
DELIMITER %%
CREATE PROCEDURE estadoEntregado(IN noentre varchar(10))
BEGIN 
UPDATE estatusentregas SET Estatus = 'Entregado' WHERE NoEntrega = noentre;
END %%
DELIMITER ; 

DELIMITER %%
CREATE PROCEDURE estadoEnProceso(IN noentre varchar(10))
BEGIN 
UPDATE estatusentregas SET Estatus = 'En proceso' WHERE NoEntrega = noentre; 
END %%
DELIMITER ; 

DELIMITER %%
CREATE PROCEDURE estadoNoEntre(IN noentre varchar(10))
BEGIN 
UPDATE estatusentregas SET Estatus = 'No Entregado' WHERE NoEntrega = noentre; 
END %%
DELIMITER ;

DELIMITER %%
CREATE PROCEDURE estadoProce(IN noentre varchar(10))
BEGIN
UPDATE estatusentregas SET Estatus = 'Procesando' WHERE NoEntrega = noentre; 
END %%
DELIMITER ;

	INSERT INTO tipoenvioentregas VALUES(noentre , tipoEnvio); 
	INSERT INTO metodopagoentregas VALUES(noentre , metodopago);


--PROCEDIMIENTO PARA REGISTRAR EL TIPO DE ENVIO 
DELIMITER %%
CREATE PROCEDURE aDocimicilio(IN noentre varchar(10))
BEGIN 
INSERT INTO tipoenvioentregas VALUES(noentre , 'A domicilio');
END %%
DELIMITER ;

DELIMITER %% 
CREATE PROCEDURE puntoEntre(IN noentre varchar(10))
BEGIN 
INSERT INTO tipoenvioentregas VALUES(noentre , 'Punto de entrega');
END %%
DELIMITER ; 

DELIMITER %%
CREATE PROCEDURE paqueteria(IN noentre varchar(10))
BEGIN 
INSERT INTO tipoenvioentregas VALUES(noentre , 'Paquetería');
END %%
DELIMITER ; 

--PROCEDIMIENTO PARA REGISTRAR EL MÉTODO DE PAGO 
DELIMITER %%
CREATE PROCEDURE enEfecti(IN noentre varchar(10))
BEGIN 
INSERT INTO metodopagoentregas VALUES(noentre , 'En efectivo');
END %%
DELIMITER ;

DELIMITER %%
CREATE PROCEDURE transfe(IN noentre varchar(10))
BEGIN 
INSERT INTO metodopagoentregas VALUES(noentre , 'Transferencia');
END %%
DELIMITER ;